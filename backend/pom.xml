<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>eu.daxiongmao</groupId>
	<artifactId>daxiongmao-backend</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>Daxiongmao :: backend</name>
	<description>Application's backend</description>

	<properties>
		<java.version>11</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencies>
		<!-- # SPRING BOOT framework # -->
		<!-- Information about application's status -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- To interact with Databases through Object-Relationship-Mapping (hibernate + JPA) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- To add web features such as web-services -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Developer features -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- ##### Utilities ##### -->
		<!-- To reduce boiler-plate code -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- Commons utilities (open source) -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.9</version>
		</dependency>


		<!-- ##### Database ##### -->
		<!-- To generate DB schema and core data -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<!-- Runtime, use Oracle. Since this driver is not on the official repositories it has been included in the project -->
		<dependency>
			<groupId>oracle</groupId>
			<artifactId>ojdbc</artifactId>
			<version>8.3</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/drivers/ojdbc8.jar</systemPath>
		</dependency>
		<!-- Test database, use H2 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.200</version>
			<scope>test</scope>
		</dependency>


		<!-- ##### Security ##### -->
		<!-- Bouncy castle is a group that focus on security enhancement of the JDK through new APIs and implementation of latest security algorithms -->
		<!-- See https://www.bouncycastle.org/latest_releases.html for latest releases and packages -->
		<!-- Bouncy castle CORE -->
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15on</artifactId>
			<version>1.64</version>
		</dependency>


		<!-- ##### Web dependencies ###### -->
		<!-- OpenAPI documentation: REST web-services documentation and tests (swagger) in JSON, YAML, HTML -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.2.32</version>
		</dependency>
		<!-- To use @JsonFormat and return information in human form to services' consumers -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- ##### Testing ##### -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>junit-vintage-engine</artifactId>
					<groupId>org.junit.vintage</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Compilation settings -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>${java.version}</release>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- Generate source artifact to upload along the binaries, this help debug mode -->
			<!-- This is mandatory for publication on Maven Central -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Generate javadoc to ease API browsing -->
			<!-- This is mandatory for publication on Maven Central -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<sourcepath>src/main/java</sourcepath>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<!-- Custom profile to execute all tests and generate quality reports -->
		<profile>
			<id>quality_control</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<properties>
				<maven.surefire.failsafe.version>2.22.2</maven.surefire.failsafe.version>
				<maven.jacoco.version>0.8.5</maven.jacoco.version>

				<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
				<!-- Unit tests -->
				<jacoco.utReportPath>${project.build.directory}/jacoco</jacoco.utReportPath>
				<jacoco.utReportFile>${jacoco.utReportPath}/jacoco.exec</jacoco.utReportFile>
				<!-- Integration tests -->
				<jacoco.itReportPath>${project.build.directory}/jacoco</jacoco.itReportPath>
				<jacoco.itReportFile>${jacoco.itReportPath}/jacoco-it.exec</jacoco.itReportFile>

			</properties>


			<build>
				<plugins>

					<!-- JACOCO test coverage plugin.
                         Use it with SUREFIRE (unit tests) and FAILSAFE (integration tests) to generate test reports
                         All reports are generated and aggregated in "${project.build.directory}/jacoco/*" by configuration
                         Good documentations:
                            https://wiki.onap.org/display/DW/Implementing+Code+Coverage
                            https://www.devcon5.ch/en/blog/2015/05/29/multi-module-integration-test-coverage-sonar-jacoco/
                            https://www.eclemma.org/jacoco/trunk/doc/maven.html
                            http://www.daxiongmao.eu/wiki/index.php?title=Sonar_%2B_maven_configuration_%2B_Jenkins [my personal blog (Guillaume Diaz, daxiongmao.eu)]
                            https://www.adictosaltrabajo.com/2018/04/12/integracion-de-un-proyecto-de-github-con-travis-y-codacy/
                         -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${maven.jacoco.version}</version>
						<executions>
							<!-- ## UNIT TESTS ## -->
							<!-- Configure JaCoCo runtime agent. It is passed as VM argument when Maven SUREFIRE plugin is executed. -->
							<execution>
								<id>pre-unit-tests</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<propertyName>jacocoSurefireArgLine</propertyName>
									<destFile>${jacoco.utReportFile}</destFile>
									<append>true</append>
								</configuration>
							</execution>
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<outputDirectory>${jacoco.utReportPath}</outputDirectory>
									<dataFile>${jacoco.utReportFile}</dataFile>
								</configuration>
							</execution>
							<!-- ## INTEGRATION TESTS ## -->
							<!-- Configure JaCoCo runtime agent. It is passed as VM argument when Maven FAILSAFE plugin is executed. -->
							<execution>
								<id>pre-integration-tests</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
								<configuration>
									<propertyName>jacocoFailsafeArgLine</propertyName>
									<destFile>${jacoco.itReportFile}</destFile>
									<append>true</append>
								</configuration>
							</execution>
							<execution>
								<id>post-integration-test</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<outputDirectory>${jacoco.itReportPath}</outputDirectory>
									<dataFile>${jacoco.itReportFile}</dataFile>
								</configuration>
							</execution>
						</executions>
					</plugin>


					<!-- To execute UNIT tests [mocks and simple, quick tests] -->
					<!-- By default, the Surefire Plugin will automatically include all test classes with the following wildcard patterns:
                        **/Test*.java - includes all of its subdirectories and all Java filenames that start with "Test"
                        **/*Test.java - includes all of its subdirectories and all Java filenames that end with "Test"
                        **/*Tests.java - includes all of its subdirectories and all Java filenames that end with "Tests"
                        **/*TestCase.java - includes all of its subdirectories and all Java filenames that end with "TestCase"
                         Integration tests patterns have been manual excluded as safety
                    -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven.surefire.failsafe.version}</version>
						<configuration>
							<argLine>
								--illegal-access=permit ${jacocoSurefireArgLine}
							</argLine>
							<excludes>
								<exclude>**/*TestAPI</exclude>
								<exclude>**/*IntegrationTest</exclude>
							</excludes>
						</configuration>
					</plugin>

					<!-- To execute INTEGRATON tests [tests that should run against real datasource, long tests] -->
					<!-- By default, the Failsafe Plugin will automatically include all test classes with the following wildcard patterns:
                            **/IT*.java - includes all of its subdirectories and all Java filenames that start with "IT".
                            **/*IT.java - includes all of its subdirectories and all Java filenames that end with "IT".
                            **/*ITCase.java - includes all of its subdirectories and all Java filenames that end with "ITCase".
                        If the test classes do not follow any of these naming conventions, then configure Failsafe Plugin and specify the tests you want to include.
                    -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${maven.surefire.failsafe.version}</version>
						<configuration>
							<argLine>
								--illegal-access=permit ${jacocoFailsafeArgLine}
							</argLine>
							<includes>
								<include>**/*TestAPI</include>
								<include>**/*IntegrationTest</include>
							</includes>
						</configuration>
					</plugin>


				</plugins>
			</build>
		</profile>
	</profiles>

</project>
